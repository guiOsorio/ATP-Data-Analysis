#We will now compute some summary statistics included as R base functions:
mean(df$Sales)  #computes the mean of the Sales variable
sd(df$Price) #computes standard deviation of Price variable
var(df$Impressions) #computes the variance of the Impressions variable
#To generate a histogram plot using R's base plotting system,
#we use the hist() function and feed it the variable from the data
#as the main argument:
hist(df$Price) #plots a histogram for the 'Price' variable.
hist(df$AdSpend) #plots a histogram for the 'Ad.Spending' variable
?hist #pulls up the help documentation for the hist function
hist(df$Sales, prob = TRUE) #generates a histogram for the Sales variable
#add calibrated normal density curve to histogram - run with line above
curve(dnorm(x, mean = mean(df$Sales), sd = sd(df$Sales)), col = "darkblue", lwd = 2, add = TRUE)
#generates a nonparametric density estimate of the distribution of the Sales variable
plot(density(df$Sales))
#Let's conduct a hypothesis test for normality!
install.packages('tseries') #installs the tseries package if not already installed
library(tseries) #loads "tseries" library - need to first install "tseries" package
#conducts a hypothesis test for normality called the Jarque-Bera test
jarque.bera.test(df$Sales) #null hypothesis: data is distributed normally
#generate a time series line plot of Sales over the index (day of the year)
plot(df$Sales, type='l')
#generate pairs of scatter plots from the variables in columns 5-8
pairs(df[,5:8])
#We can also generate the entire variance-covariance matrix
#between a set of variables. Here, we do this by "grabbing"
#only the variables in columns 5 through 8:
cov(df[,5:8])
#It may be more useful to look at the correlation matrix:
cor(df[,5:8])
#We can generate a scatter plot to "zoom in" on
#a particular pair of variables.  These three
#lines are all generate equivalent plots with small
#aesthetic differences in terms of axis labeling:
plot(df$Sales~df$AdSpend) #plot(y~x)
plot(Sales~AdSpend, df) #plot(y~x)
plot(df$AdSpend, df$Sales) #plot(x,y)
#scatter plot of Sales vs. AdSpend  colored by the Promo variable
plot(df$Sales~df$AdSpend, col=factor(df$Promo))
View(df)
#generates legend - run these lines together with the plot above
legend("topleft", legend=c("Promotion", "No Promotion"), #adds legend
col=c("red", "black"), pch=1, cex=0.8,
box.lty=2, box.lwd=2, box.col="black")
#generates legend - run these lines together with the plot above
legend("topleft", legend=c("Promotion", "No Promotion"), #adds legend
col=c("pink", "black"), pch=1, cex=0.8,
box.lty=2, box.lwd=2, box.col="black")
#generates legend - run these lines together with the plot above
legend("topleft", legend=c("Promotion", "No Promotion"), #adds legend
col=c("red", "black"), pch=1, cex=0.8,
box.lty=2, box.lwd=2, box.col="black")
##LOOK AT DISTRIBUTION OF SALES ACROSS PROMO VS NON PROMO DAYS##
install.packages('sm') #installs the sm package if not already installed
library(sm) #loads library for the next function to work
sm.density.compare(df$Sales, df$Promo) #generates two nonparametric density plots
#generates legend - run with line above
legend("topleft", legend=c("No Promotion", "Promotion"),
col=c("red", "green"), lty=1:2, cex=0.8,
box.lty=2, box.lwd=2, box.col="black")
#generates legend - run these lines together with the plot above
legend("topleft", legend=c("Promotion", "No Promotion"), #adds legend
col=c("red", "black"), pch=1, cex=0.8,
box.lty=2, box.lwd=2, box.col="black")
#scatter plot of Sales vs. AdSpend  colored by the Promo variable
plot(df$Sales~df$AdSpend, col=factor(df$Promo))
#generates legend - run these lines together with the plot above
legend("topleft", legend=c("Promotion", "No Promotion"), #adds legend
col=c("red", "black"), pch=1, cex=0.8,
box.lty=2, box.lwd=2, box.col="black")
##LOOK AT DISTRIBUTION OF SALES ACROSS PROMO VS NON PROMO DAYS##
install.packages('sm') #installs the sm package if not already installed
library(sm) #loads library for the next function to work
sm.density.compare(df$Sales, df$Promo) #generates two nonparametric density plots
#generates legend - run with line above
legend("topleft", legend=c("No Promotion", "Promotion"),
col=c("red", "green"), lty=1:2, cex=0.8,
box.lty=2, box.lwd=2, box.col="black")
sm.density.compare(df$Sales, df$Promo) #generates two nonparametric density plots
library(swirl)
install_course("Getting and Cleaning Data")
swirl()
lifecycle::last_warnings()
read.csv(path2csv, stringAsFactors = FALSE)
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVerison("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country IN "India", r_version == "3.0.2")
filter(cran, country == "India", r_version == "3.0.2")
filter(cran, country == "IN", r_version >= "3.0.2")
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
cran2
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
cran3 <- mutate(cran3, size_mb = size / 2^20)
cran3 <- mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
cran3 <- select(cran, ip_id, package, size)
mutate(cran3, size_mb = size / 2^10, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
install_course("Exploratory Data Analysis")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by,package, mean(size))
summarize(by_package, mean(size))
count = n()
n()
submit()
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_count, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(tseries)
read.table("https://raw.githubusercontent.com/slevkoff/CLASS_DATA/master/Admissions.txt", header = TRUE)
fb <- read.table("https://raw.githubusercontent.com/slevkoff/CLASS_DATA/master/Admissions.txt", header = TRUE)
View(fb)
ad <- read.table("https://raw.githubusercontent.com/slevkoff/CLASS_DATA/master/Admissions.txt", header = TRUE)
View(ad)
#TASK SET I
read.csv("https://raw.githubusercontent.com/slevkoff/CLASS_DATA/master/Armband.csv", header = TRUE)
#TASK SET I
fb <- read.csv("https://raw.githubusercontent.com/slevkoff/CLASS_DATA/master/Armband.csv", header = TRUE)
corr(ad)
cor(ad)
tail(fb)
rm(list=ls())
#TASK SET I
fb <- read.csv("https://raw.githubusercontent.com/slevkoff/CLASS_DATA/master/Armband.csv", header = TRUE)
ad <- read.table("https://raw.githubusercontent.com/slevkoff/CLASS_DATA/master/Admissions.txt", header = TRUE)
sum(!is.na(fb))
sum(is.na(fb)) + sum(!is.na(fb))
fb_nona <- na.omit(fb)
View(fb)
mean(fb$max_roll_belt)
mean(fb$max_roll_belt, na.rm = TRUE)
jarque.bera.test(ad$gmat)
jarque.bera.test(ad$gpa)
jarque.bera.test(ad$admit)
jarque.bera.test(ad$rank)
jarque.bera.test(ad$gpa)
jarque.bera.test(ad$gmat)
#TASK SET III
read.table("https://raw.githubusercontent.com/slevkoff/CLASS_DATA/master/SALES.csv", header = TRUE)
#TASK SET III
sales <- read.table("https://raw.githubusercontent.com/slevkoff/CLASS_DATA/master/SALES.csv", header = TRUE)
View(sales)
#TASK SET III
sales <- read.csv("https://raw.githubusercontent.com/slevkoff/CLASS_DATA/master/SALES.csv", header = TRUE)
View(sales)
sales %>% arrange(Sales~Day)
arrange(sales, Sales~Day)
library(dplyr)
arrange(sales, Sales~Day)
sales %>% arrange(Sales, Day)
ft <- sales %>% arrange(Sales, Day)
head(ft)
ft <- sales %>% arrange(Day, Sales)
head(ft)
?group_by
ft <- group_by(sales$Sales, Day)
ft <- group_by(sales, Day)
head(ft)
ft
sum(sales$Day == "Monday")
summarise(sales, mean_sales = mean(sales))
sales %>% group_by(Day) %>% summarise(mean_sales = mean(sales))
sales %>% group_by(Day) %>% summarise(mean_sales = mean(sales), na.rm = TRUE)
sales %>% group_by(Day)
summarise(try = mean(Sales))
sales %>% group_by(Day) %>% summarise(try = mean(Sales))
sales %>% group_by(Day) %>% summarise(mean_Sales = mean(Sales))
sales %>% group_by(Day) %>% summarise(mean_Sales = mean(Sales)) %>% arrange(mean_Sales)
sales %>% group_by(Day) %>% summarise(mean_Sales = mean(Sales)) %>% arrange(mean_Sales, desc = TRUE)
sales %>% group_by(Day) %>% summarise(mean_Sales = mean(Sales)) %>% arrange(mean_Sales, desc = FALSE)
sales
sales %>% group_by(Month) %>% summarise(cor_SalesAd = cor())
sales %>% group_by(Month) %>% summarise(cor_SalesAd = cor(sales))
sales %>% group_by(Month) %>% summarise(cor_SalesAd = cor(Sales))
sales %>% group_by(Month) %>% summarise(cor_SalesAd = cor(Sales))
?cor
sales %>% group_by(Month) %>% cor()
sales %>% group_by(Month) %>% cor(sales)
sales %>% group_by(Month) %>% summarise(mean_Sales = mean(Sales))
sales %>% group_by(Month) %>% summarise(mean_Sales = cor(Sales))
sales %>% group_by(Month) %>% summarize(corr = cor(Sales, AdSpend))
sales %>% group_by(Month) %>% summarize(corr = cor(Sales, AdSpend)) %>% arrange(corr, desc = FALSE)
swirl()
library(swirl)
swirl()
swirl()
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
dist(dataFrame)
distxy
hc <- hcust(distxy)
hc <- hclust(distxy)
plot(hc)
as.dendogram(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
5
abline(h = 0.05, col = "green")
12
abline(h = 0.05, col = "green")
dist(dFsm)
hc
dataMatrix
heatmap(dataMatrix, col = cm.colors(25))
heatmpa(mt)
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min())
apply(distTmp, 2, which.min(distTmp))
apply(distTmp, 2, which.min
)
points(x,y,pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
newClust
tapply(y, newClust, mean)
points(newCx, newCy, cols = cols1, pch = 8, cex = 2, lwd = 2)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y,newCx,newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust, mean)
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y,col = kmObj$cluster,pch = 19,cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
exit
exit()
library(swirl)
swirl()
dim(ssd)
names(ssd)
names(ssd[562:"563"])
names(ssd[562:563])
table(ssd$subject)
dim(ssd)
sum(table(ssd$subject))
ssd$subject
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[:12])
names(sub1[1:12])
myedit("showXY.R")
showMe(c(1:6))
mdist <- dist(sub1[,1:3])
mdist
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
maxCon
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(-sub1[,562:563], centers = 6)
kClust <- kmeans(sub1[,562:563], centers = 6)
kClust <- kmeans(sub1, centers = 6)
kClust <- kmeans(sub1[1:561], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
strsplit(cnames, "|", fixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
x0
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 && county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(median(x0sub, na.rm = TRUE), lwd = 2)
abline(median(x0sub), lwd = 2)
median(x0sub)
abline(h = median(x0sub), lwd = 2)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub,x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean,na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean,na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
d1
mrg <- merge(d0,d1,by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments()
mean(pm0)
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y,]
source("~/School work/BUAN370/Final_Project/code.r", echo=TRUE)
get_wd()
get_dw()
wd()
getwd()
setwd
rm(list = ls())
rm(list = ls())
data(iris)
head(iris)
summary(iris)
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(scale(iris$Sepal.Length), scale(iris$Sepal.Width))
myPR
# PCA
myPr <- prcomp(iris[,1:4], scale = TRUE)
myPr
myPr
myPr$rotation
summary(myPr)
plot(myPr, type = "l")
biplot(myPr, scale = 0)
# EXTRACT PC SCORES
str(myPr)
myPr$x
iris <- cbind(iris, myPr$x[,1:2])
head(iris2)
# https://www.youtube.com/watch?v=xKl4LJAXnEA
data(iris)
head(iris)
summary(iris)
# PCA
myPr <- prcomp(iris[,1:4], scale = TRUE)
plot(scale(iris$Sepal.Length), scale(iris$Sepal.Width))
myPr
summary(myPr)
plot(myPr, type = "l")
biplot(myPr, scale = 0)
# EXTRACT PC SCORES
str(myPr)
myPr$x
iris2 <- cbind(iris, myPr$x[,1:2])
head(iris2)
ggplot(iris2, aes(PC1, PC2, col = Species))
# PLOT WITH GGPLOT
library(ggplot)
ggplot(iris2, aes(PC1, PC2, col = Species, fill = Species)) +
stat_ellipse()
# PLOT WITH GGPLOT
library(ggplot2)
ggplot(iris2, aes(PC1, PC2, col = Species, fill = Species)) +
stat_ellipse()
ggplot(iris2, aes(PC1, PC2, col = Species, fill = Species)) +
stat_ellipse(geom = 'polygon', col = 'black', alpha = 0.5) +
geom_point(shape = 21, col = 'black')
# CORRELATIONS BETWEEN VARIABLES AND PRINCIPAL COMPONENTS
cor(iris[,1:4], iris2[,6:7])
View(sales)
rm(list = ls())
#### LOAD LIBRARIES
library(dplyr)
library(sqldf)
library(MASS)
library(ggplot2)
theme_set(theme_classic())
#### READ DATA
df_pinfo <- read.csv('../STAGE_1/player_info.csv')
df_region <- read.csv('region.csv', fileEncoding="UTF-8-BOM")
#### READ DATA
df_pinfo <- read.csv('../STAGE_1/player_info.csv', fileEncoding="UTF-8-BOM")
setwd("~/Code/R_Analysis/ATP/Tennis-Data-Analysis/STAGE_2")
#### READ DATA
df_pinfo <- read.csv('../STAGE_1/player_info.csv', fileEncoding="UTF-8-BOM")
View(df_pinfo)
df_region <- read.csv('../STAGE_1/region.csv', fileEncoding="UTF-8-BOM")
df_serve <- read.csv('../STAGE_1/serve_stats.csv', fileEncoding="UTF-8-BOM")
df_return <- read.csv('../STAGE_1/return_stats.csv', fileEncoding="UTF-8-BOM")
df_pressure <- read.csv('../STAGE_1/pressure_stats.csv', fileEncoding="UTF-8-BOM")
rm(list = ls())
